module HanzoAI
  module Models
    type customer_update_params =
      {
        user_id: String,
        alias_: String?,
        allowed_model_region: HanzoAI::Models::CustomerUpdateParams::allowed_model_region?,
        blocked: bool,
        budget_id: String?,
        default_model: String?,
        max_budget: Float?
      }
      & HanzoAI::request_parameters

    class CustomerUpdateParams < HanzoAI::BaseModel
      extend HanzoAI::RequestParameters::Converter
      include HanzoAI::RequestParameters

      attr_accessor user_id: String

      attr_accessor alias_: String?

      attr_accessor allowed_model_region: HanzoAI::Models::CustomerUpdateParams::allowed_model_region?

      attr_reader blocked: bool?

      def blocked=: (bool) -> bool

      attr_accessor budget_id: String?

      attr_accessor default_model: String?

      attr_accessor max_budget: Float?

      def initialize: (
        user_id: String,
        ?alias_: String?,
        ?allowed_model_region: HanzoAI::Models::CustomerUpdateParams::allowed_model_region?,
        ?blocked: bool,
        ?budget_id: String?,
        ?default_model: String?,
        ?max_budget: Float?,
        ?request_options: HanzoAI::request_opts
      ) -> void

      def to_hash: -> HanzoAI::Models::customer_update_params

      type allowed_model_region = :eu | :us

      module AllowedModelRegion
        extend HanzoAI::Enum

        EU: :eu
        US: :us

        def self?.values: -> ::Array[HanzoAI::Models::CustomerUpdateParams::allowed_model_region]
      end
    end
  end
end
