module HanzoAI
  module Models
    type team_add_member_response =
      {
        team_id: String,
        updated_team_memberships: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedTeamMembership],
        updated_users: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedUser],
        admins: ::Array[top],
        blocked: bool,
        budget_duration: String?,
        budget_reset_at: Time?,
        created_at: Time?,
        llm_model_table: HanzoAI::Models::TeamAddMemberResponse::LlmModelTable?,
        max_budget: Float?,
        max_parallel_requests: Integer?,
        members: ::Array[top],
        members_with_roles: ::Array[HanzoAI::Models::Member],
        metadata: top?,
        model_id: Integer?,
        models: ::Array[top],
        organization_id: String?,
        rpm_limit: Integer?,
        spend: Float?,
        team_alias: String?,
        tpm_limit: Integer?
      }

    class TeamAddMemberResponse < HanzoAI::BaseModel
      attr_accessor team_id: String

      attr_accessor updated_team_memberships: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedTeamMembership]

      attr_accessor updated_users: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedUser]

      attr_reader admins: ::Array[top]?

      def admins=: (::Array[top]) -> ::Array[top]

      attr_reader blocked: bool?

      def blocked=: (bool) -> bool

      attr_accessor budget_duration: String?

      attr_accessor budget_reset_at: Time?

      attr_accessor created_at: Time?

      attr_accessor llm_model_table: HanzoAI::Models::TeamAddMemberResponse::LlmModelTable?

      attr_accessor max_budget: Float?

      attr_accessor max_parallel_requests: Integer?

      attr_reader members: ::Array[top]?

      def members=: (::Array[top]) -> ::Array[top]

      attr_reader members_with_roles: ::Array[HanzoAI::Models::Member]?

      def members_with_roles=: (
        ::Array[HanzoAI::Models::Member]
      ) -> ::Array[HanzoAI::Models::Member]

      attr_accessor metadata: top?

      attr_accessor model_id: Integer?

      attr_reader models: ::Array[top]?

      def models=: (::Array[top]) -> ::Array[top]

      attr_accessor organization_id: String?

      attr_accessor rpm_limit: Integer?

      attr_accessor spend: Float?

      attr_accessor team_alias: String?

      attr_accessor tpm_limit: Integer?

      def initialize: (
        team_id: String,
        updated_team_memberships: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedTeamMembership],
        updated_users: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedUser],
        ?admins: ::Array[top],
        ?blocked: bool,
        ?budget_duration: String?,
        ?budget_reset_at: Time?,
        ?created_at: Time?,
        ?llm_model_table: HanzoAI::Models::TeamAddMemberResponse::LlmModelTable?,
        ?max_budget: Float?,
        ?max_parallel_requests: Integer?,
        ?members: ::Array[top],
        ?members_with_roles: ::Array[HanzoAI::Models::Member],
        ?metadata: top?,
        ?model_id: Integer?,
        ?models: ::Array[top],
        ?organization_id: String?,
        ?rpm_limit: Integer?,
        ?spend: Float?,
        ?team_alias: String?,
        ?tpm_limit: Integer?
      ) -> void

      def to_hash: -> HanzoAI::Models::team_add_member_response

      type updated_team_membership =
        {
          budget_id: String,
          llm_budget_table: HanzoAI::Models::TeamAddMemberResponse::UpdatedTeamMembership::LlmBudgetTable?,
          team_id: String,
          user_id: String
        }

      class UpdatedTeamMembership < HanzoAI::BaseModel
        attr_accessor budget_id: String

        attr_accessor llm_budget_table: HanzoAI::Models::TeamAddMemberResponse::UpdatedTeamMembership::LlmBudgetTable?

        attr_accessor team_id: String

        attr_accessor user_id: String

        def initialize: (
          budget_id: String,
          llm_budget_table: HanzoAI::Models::TeamAddMemberResponse::UpdatedTeamMembership::LlmBudgetTable?,
          team_id: String,
          user_id: String
        ) -> void

        def to_hash: -> HanzoAI::Models::TeamAddMemberResponse::updated_team_membership

        type llm_budget_table =
          {
            budget_duration: String?,
            max_budget: Float?,
            max_parallel_requests: Integer?,
            model_max_budget: top?,
            rpm_limit: Integer?,
            soft_budget: Float?,
            tpm_limit: Integer?
          }

        class LlmBudgetTable < HanzoAI::BaseModel
          attr_accessor budget_duration: String?

          attr_accessor max_budget: Float?

          attr_accessor max_parallel_requests: Integer?

          attr_accessor model_max_budget: top?

          attr_accessor rpm_limit: Integer?

          attr_accessor soft_budget: Float?

          attr_accessor tpm_limit: Integer?

          def initialize: (
            ?budget_duration: String?,
            ?max_budget: Float?,
            ?max_parallel_requests: Integer?,
            ?model_max_budget: top?,
            ?rpm_limit: Integer?,
            ?soft_budget: Float?,
            ?tpm_limit: Integer?
          ) -> void

          def to_hash: -> HanzoAI::Models::TeamAddMemberResponse::UpdatedTeamMembership::llm_budget_table
        end
      end

      type updated_user =
        {
          user_id: String,
          budget_duration: String?,
          budget_reset_at: Time?,
          max_budget: Float?,
          metadata: top?,
          model_max_budget: top?,
          model_spend: top?,
          models: ::Array[top],
          organization_memberships: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::OrganizationMembership]?,
          rpm_limit: Integer?,
          spend: Float,
          sso_user_id: String?,
          teams: ::Array[String],
          tpm_limit: Integer?,
          user_email: String?,
          user_role: String?
        }

      class UpdatedUser < HanzoAI::BaseModel
        attr_accessor user_id: String

        attr_accessor budget_duration: String?

        attr_accessor budget_reset_at: Time?

        attr_accessor max_budget: Float?

        attr_accessor metadata: top?

        attr_accessor model_max_budget: top?

        attr_accessor model_spend: top?

        attr_reader models: ::Array[top]?

        def models=: (::Array[top]) -> ::Array[top]

        attr_accessor organization_memberships: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::OrganizationMembership]?

        attr_accessor rpm_limit: Integer?

        attr_reader spend: Float?

        def spend=: (Float) -> Float

        attr_accessor sso_user_id: String?

        attr_reader teams: ::Array[String]?

        def teams=: (::Array[String]) -> ::Array[String]

        attr_accessor tpm_limit: Integer?

        attr_accessor user_email: String?

        attr_accessor user_role: String?

        def initialize: (
          user_id: String,
          ?budget_duration: String?,
          ?budget_reset_at: Time?,
          ?max_budget: Float?,
          ?metadata: top?,
          ?model_max_budget: top?,
          ?model_spend: top?,
          ?models: ::Array[top],
          ?organization_memberships: ::Array[HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::OrganizationMembership]?,
          ?rpm_limit: Integer?,
          ?spend: Float,
          ?sso_user_id: String?,
          ?teams: ::Array[String],
          ?tpm_limit: Integer?,
          ?user_email: String?,
          ?user_role: String?
        ) -> void

        def to_hash: -> HanzoAI::Models::TeamAddMemberResponse::updated_user

        type organization_membership =
          {
            created_at: Time,
            organization_id: String,
            updated_at: Time,
            user_id: String,
            budget_id: String?,
            llm_budget_table: HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::OrganizationMembership::LlmBudgetTable?,
            spend: Float,
            user: top,
            user_role: String?
          }

        class OrganizationMembership < HanzoAI::BaseModel
          attr_accessor created_at: Time

          attr_accessor organization_id: String

          attr_accessor updated_at: Time

          attr_accessor user_id: String

          attr_accessor budget_id: String?

          attr_accessor llm_budget_table: HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::OrganizationMembership::LlmBudgetTable?

          attr_reader spend: Float?

          def spend=: (Float) -> Float

          attr_reader user: top?

          def user=: (top) -> top

          attr_accessor user_role: String?

          def initialize: (
            created_at: Time,
            organization_id: String,
            updated_at: Time,
            user_id: String,
            ?budget_id: String?,
            ?llm_budget_table: HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::OrganizationMembership::LlmBudgetTable?,
            ?spend: Float,
            ?user: top,
            ?user_role: String?
          ) -> void

          def to_hash: -> HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::organization_membership

          type llm_budget_table =
            {
              budget_duration: String?,
              max_budget: Float?,
              max_parallel_requests: Integer?,
              model_max_budget: top?,
              rpm_limit: Integer?,
              soft_budget: Float?,
              tpm_limit: Integer?
            }

          class LlmBudgetTable < HanzoAI::BaseModel
            attr_accessor budget_duration: String?

            attr_accessor max_budget: Float?

            attr_accessor max_parallel_requests: Integer?

            attr_accessor model_max_budget: top?

            attr_accessor rpm_limit: Integer?

            attr_accessor soft_budget: Float?

            attr_accessor tpm_limit: Integer?

            def initialize: (
              ?budget_duration: String?,
              ?max_budget: Float?,
              ?max_parallel_requests: Integer?,
              ?model_max_budget: top?,
              ?rpm_limit: Integer?,
              ?soft_budget: Float?,
              ?tpm_limit: Integer?
            ) -> void

            def to_hash: -> HanzoAI::Models::TeamAddMemberResponse::UpdatedUser::OrganizationMembership::llm_budget_table
          end
        end
      end

      type llm_model_table =
        {
          created_by: String,
          updated_by: String,
          model_aliases: HanzoAI::Models::TeamAddMemberResponse::LlmModelTable::model_aliases?
        }

      class LlmModelTable < HanzoAI::BaseModel
        attr_accessor created_by: String

        attr_accessor updated_by: String

        attr_accessor model_aliases: HanzoAI::Models::TeamAddMemberResponse::LlmModelTable::model_aliases?

        def initialize: (
          created_by: String,
          updated_by: String,
          ?model_aliases: HanzoAI::Models::TeamAddMemberResponse::LlmModelTable::model_aliases?
        ) -> void

        def to_hash: -> HanzoAI::Models::TeamAddMemberResponse::llm_model_table

        type model_aliases = top | String

        module ModelAliases
          extend HanzoAI::Union

          def self?.variants: -> [top, String]
        end
      end
    end
  end
end
